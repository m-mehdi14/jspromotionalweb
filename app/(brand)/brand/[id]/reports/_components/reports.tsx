// "use client";

// import React, { useState } from "react";
// import { Button } from "@/components/ui/button";
// import {
//   PieChart,
//   Pie,
//   Cell,
//   Tooltip,
//   Legend,
//   ResponsiveContainer,
// } from "recharts";
// import { useAuth } from "@/lib/AuthContext/authContext";
// import jsPDF from "jspdf";
// import "jspdf-autotable";
// import { useRouter, useSearchParams } from "next/navigation";

// const COLORS = [
//   "#0088FE",
//   "#00C49F",
//   "#FFBB28",
//   "#FF8042",
//   "#FF6384",
//   "#36A2EB",
// ];

// interface Metric {
//   label: string;
//   value: number;
// }

// interface AdminReportsProps {
//   metrics: Metric[];
// }

// export const BrandReports: React.FC<AdminReportsProps> = ({ metrics }) => {
//   const { user } = useAuth();

//   const router = useRouter();
//   const searchParams = useSearchParams();

//   // Get current date range from search params
//   const [startDate, setStartDate] = useState(
//     searchParams.get("startDate") || ""
//   );
//   const [endDate, setEndDate] = useState(searchParams.get("endDate") || "");

//   // Function to update URL with selected date range
//   const handleApplyDateRange = () => {
//     const params = new URLSearchParams(searchParams.toString());
//     if (startDate) params.set("startDate", startDate);
//     if (endDate) params.set("endDate", endDate);

//     router.replace(`/brand/${user?.uid}/reports?${params.toString()}`);
//   };

//   // Function to clear date filters
//   const handleClearDateRange = () => {
//     setStartDate("");
//     setEndDate("");

//     router.replace(`/brand/${user?.uid}/reports`);
//   };

//   const handleGenerateReport = () => {
//     const doc = new jsPDF();

//     // Add title
//     doc.setFontSize(18);
//     doc.text("Admin Report", 14, 20);

//     // Add subtitle
//     doc.setFontSize(12);
//     doc.text(`Generated on: ${new Date().toLocaleString()}`, 14, 30);

//     // Add date range
//     if (startDate && endDate) {
//       doc.text(`Date Range: ${startDate} to ${endDate}`, 14, 40);
//     }

//     // Add table for metrics
//     const tableData = metrics.map((metric) => [metric.label, metric.value]);

//     // @ts-expect-error ignore
//     doc.autoTable({
//       head: [["Metric", "Value"]],
//       body: tableData,
//       startY: startDate && endDate ? 50 : 40, // Adjust startY based on whether date range is present
//       styles: { halign: "center" },
//       headStyles: { fillColor: [0, 123, 255] },
//       bodyStyles: { fillColor: [245, 245, 245] },
//     });

//     // Add footer
//     const pageHeight = doc.internal.pageSize.height;
//     doc.setFontSize(10);
//     doc.text("Report generated by Admin Dashboard", 14, pageHeight - 10);

//     // Save the PDF
//     doc.save("admin_report.pdf");
//   };

//   return (
//     <div className="min-h-screen bg-gray-100 text-black p-8">
//       {/* Header Section */}
//       <header className="mb-10">
//         <h1 className="text-3xl font-bold text-center text-gray-800 mb-4">
//           Brand Reports
//         </h1>
//         <div className="flex items-center justify-between">
//           <p className="text-gray-600">Welcome, {user?.email || "Admin"}!</p>
//           <Button
//             onClick={handleGenerateReport}
//             className="bg-blue-500 hover:bg-blue-600 text-white px-6 py-3 rounded-lg"
//           >
//             Generate Report
//           </Button>
//         </div>
//       </header>

//       {/* Main Content */}
//       <main>
//         <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
//           {/* Date Range Selection */}
//           <div className="bg-white p-6 rounded-lg shadow-md">
//             <h2 className="text-xl font-bold mb-4">Select Date Range</h2>
//             <div className="flex flex-col space-y-4">
//               <input
//                 type="date"
//                 value={startDate}
//                 onChange={(e) => setStartDate(e.target.value)}
//                 className="p-2 border border-gray-300 rounded"
//               />
//               <input
//                 type="date"
//                 value={endDate}
//                 onChange={(e) => setEndDate(e.target.value)}
//                 className="p-2 border border-gray-300 rounded"
//               />
//               <Button
//                 onClick={handleApplyDateRange}
//                 className="bg-green-500 hover:bg-green-600 text-white px-6 py-3 rounded-lg"
//               >
//                 Apply Date Range
//               </Button>
//               <Button
//                 onClick={handleClearDateRange}
//                 className="bg-red-500 hover:bg-red-600 text-white px-6 py-3 rounded-lg flex-1"
//               >
//                 Clear Date Range
//               </Button>
//             </div>
//           </div>

//           {/* Metrics Overview */}
//           <div className="bg-white p-6 rounded-lg shadow-md">
//             <h2 className="text-xl font-bold mb-4">Metrics Overview</h2>
//             <div className="grid grid-cols-2 gap-4">
//               {metrics.map((metric, index) => (
//                 <div
//                   key={index}
//                   className="flex flex-col items-center justify-center bg-gray-50 p-4 rounded shadow-sm"
//                 >
//                   <p className="text-lg font-bold">{metric.value}</p>
//                   <p className="text-gray-500 text-sm">{metric.label}</p>
//                 </div>
//               ))}
//             </div>
//           </div>

//           {/* Pie Chart */}
//           <div className="bg-white p-6 rounded-lg shadow-md">
//             <h2 className="text-xl font-bold mb-4">Data Distribution</h2>
//             <ResponsiveContainer width="100%" height={300}>
//               <PieChart>
//                 <Pie
//                   data={metrics}
//                   dataKey="value"
//                   nameKey="label"
//                   cx="50%"
//                   cy="50%"
//                   outerRadius={100}
//                   fill="#8884d8"
//                   label
//                 >
//                   {metrics.map((entry, index) => (
//                     <Cell
//                       key={`cell-${index}`}
//                       fill={COLORS[index % COLORS.length]}
//                     />
//                   ))}
//                 </Pie>
//                 <Tooltip />
//                 <Legend verticalAlign="bottom" height={36} />
//               </PieChart>
//             </ResponsiveContainer>
//           </div>
//         </div>
//       </main>
//     </div>
//   );
// };

////////////////////////////////////////////////////////////////////////////////////////////////////

"use client";

import React, { useState } from "react";
import { Button } from "@/components/ui/button";
import { FiFileText, FiTrash2, FiCheckCircle } from "react-icons/fi";
import { useRouter, usePathname, useSearchParams } from "next/navigation";
import {
  PieChart,
  Pie,
  Cell,
  Tooltip,
  Legend,
  ResponsiveContainer,
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
} from "recharts";
import jsPDF from "jspdf";
import "jspdf-autotable";

const COLORS = [
  "#0088FE",
  "#00C49F",
  "#FFBB28",
  "#FF8042",
  "#FF6384",
  "#36A2EB",
];

interface Metric {
  label: string;
  value: number;
}

interface BrandReportsProps {
  metrics: Metric[];
  storesData: [];
  specialEvents: [];
  flyersData: [];
  couponGiftsData: [];
}

export const BrandReports: React.FC<BrandReportsProps> = ({
  metrics,
  storesData,
  specialEvents,
  flyersData,
  couponGiftsData,
}) => {
  const router = useRouter();
  const pathname = usePathname();
  const searchParams = useSearchParams();

  const brandId = pathname.split("/")[2];

  const [state, setState] = useState({
    startDate: searchParams.get("startDate") || "",
    endDate: searchParams.get("endDate") || "",
    selectedCategory: null as string | null,
  });

  const updateSearchParams = (params: Record<string, string | null>) => {
    const updatedParams = new URLSearchParams(searchParams.toString());
    Object.entries(params).forEach(([key, value]) => {
      if (value) updatedParams.set(key, value);
      else updatedParams.delete(key);
    });

    router.replace(`/brand/${brandId}/reports?${updatedParams.toString()}`);
  };

  const handleApplyDateRange = () => {
    updateSearchParams({ startDate: state.startDate, endDate: state.endDate });
  };

  const handleClearDateRange = () => {
    setState((prev) => ({ ...prev, startDate: "", endDate: "" }));
    updateSearchParams({ startDate: null, endDate: null });
  };

  const handleGenerateReport = () => {
    const doc = new jsPDF();
    doc.setFontSize(18);
    doc.text("Brand Report", 14, 20);
    doc.setFontSize(12);
    doc.text(`Generated on: ${new Date().toLocaleString()}`, 14, 30);

    if (state.startDate && state.endDate) {
      doc.text(`Date Range: ${state.startDate} to ${state.endDate}`, 14, 40);
    }

    // @ts-expect-error ignore
    doc.autoTable({
      head: [["Metric", "Value"]],
      body: metrics.map((metric) => [metric.label, metric.value]),
      startY: 50,
    });

    doc.save("brand_report.pdf");
  };

  return (
    <div className="min-h-screen text-black p-8">
      {/* Header */}
      <header className="w-full flex justify-between items-center bg-black text-white rounded-md p-6">
        <h1 className="text-3xl font-bold">Brand Reports</h1>
        <Button
          onClick={handleGenerateReport}
          className="bg-blue-500 hover:bg-blue-600 text-white px-6 py-3 rounded-lg flex items-center"
        >
          <FiFileText className="mr-2 text-lg" /> Generate Report
        </Button>
      </header>

      {/* Date Filters */}
      <div className="flex items-center justify-start space-x-4 mt-6">
        <input
          type="date"
          value={state.startDate}
          onChange={(e) =>
            setState((prev) => ({ ...prev, startDate: e.target.value }))
          }
          className="px-4 py-2 border border-gray-300 rounded w-60"
        />
        <input
          type="date"
          value={state.endDate}
          onChange={(e) =>
            setState((prev) => ({ ...prev, endDate: e.target.value }))
          }
          className="px-4 py-2 border border-gray-300 rounded w-60"
        />
        <Button
          onClick={handleApplyDateRange}
          className="bg-green-500 hover:bg-green-600 text-white px-6 py-3 rounded-lg flex items-center"
        >
          <FiCheckCircle className="mr-2" /> Apply
        </Button>
        <Button
          onClick={handleClearDateRange}
          className="bg-red-500 hover:bg-red-600 text-white px-6 py-3 rounded-lg flex items-center"
        >
          <FiTrash2 className="mr-2" /> Clear
        </Button>
      </div>

      {/* Main Content */}
      <main className="mt-6 grid grid-cols-1 lg:grid-cols-2 gap-8">
        {/* Total Summary */}
        <div className="bg-white p-6 rounded-lg shadow-md">
          <h2 className="text-xl font-bold mb-4">Total Summary</h2>
          <div className="grid grid-cols-2 gap-4">
            {metrics.map((metric, index) => (
              <div
                key={index}
                className="flex flex-col items-center bg-gray-50 p-4 rounded shadow-sm cursor-pointer hover:bg-gray-200 transition"
                onClick={() =>
                  setState((prev) => ({
                    ...prev,
                    selectedCategory: metric.label,
                  }))
                }
              >
                <p className="text-lg font-bold">{metric.value}</p>
                <p className="text-gray-500 text-sm">{metric.label}</p>
              </div>
            ))}
          </div>
        </div>

        {/* Trends Over Time */}
        <div className="bg-white p-6 rounded-lg shadow-md">
          <h2 className="text-xl font-bold mb-4">Trends Over Time</h2>
          <ResponsiveContainer width="100%" height={300}>
            <LineChart data={metrics}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="label" />
              <YAxis />
              <Tooltip />
              <Line type="monotone" dataKey="value" stroke="#36A2EB" />
            </LineChart>
          </ResponsiveContainer>
        </div>

        {/* Data Distribution */}
        <div className="bg-white p-6 rounded-lg shadow-md">
          <h2 className="text-xl font-bold mb-4">Data Distribution</h2>
          <ResponsiveContainer width="100%" height={300}>
            <PieChart>
              <Pie
                data={metrics}
                dataKey="value"
                nameKey="label"
                cx="50%"
                cy="50%"
                outerRadius={100}
                label
              >
                {metrics.map((entry, index) => (
                  <Cell
                    key={`cell-${index}`}
                    fill={COLORS[index % COLORS.length]}
                  />
                ))}
              </Pie>
              <Tooltip />
              <Legend />
            </PieChart>
          </ResponsiveContainer>
        </div>

        {/* Dynamic Data Section */}
        {state.selectedCategory && (
          <div className="bg-white p-6 rounded-lg shadow-md">
            <h2 className="text-xl font-bold mb-4">
              {state.selectedCategory} Details
            </h2>

            {state.selectedCategory === "Stores" && storesData?.length > 0 ? (
              storesData.map((store) => (
                <p
                  key={
                    // @ts-expect-error ignore
                    store.id
                  }
                >
                  {
                    // @ts-expect-error ignore
                    store.name
                  }
                </p>
              ))
            ) : state.selectedCategory === "Special Events" &&
              specialEvents?.length > 0 ? (
              specialEvents.map((event) => (
                <p
                  key={
                    // @ts-expect-error ignore
                    event.id
                  }
                >
                  {
                    // @ts-expect-error ignore
                    event.name
                  }
                </p>
              ))
            ) : state.selectedCategory === "Flyers" &&
              flyersData?.length > 0 ? (
              flyersData.map((flyer) => (
                <p
                  key={
                    // @ts-expect-error ignore
                    flyer.id
                  }
                >
                  {
                    // @ts-expect-error ignore
                    flyer.title
                  }
                </p>
              ))
            ) : state.selectedCategory === "Coupon Gifts" &&
              couponGiftsData?.length > 0 ? (
              couponGiftsData.map((coupon) => (
                <p
                  key={
                    // @ts-expect-error ignore
                    coupon.id
                  }
                >
                  {
                    // @ts-expect-error ignore
                    coupon.name
                  }
                </p>
              ))
            ) : (
              <p className="text-gray-500">No data available.</p>
            )}
          </div>
        )}
      </main>
    </div>
  );
};
