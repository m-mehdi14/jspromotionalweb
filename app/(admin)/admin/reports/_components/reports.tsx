"use client";

import React from "react";
import { Button } from "@/components/ui/button";
import {
  PieChart,
  Pie,
  Cell,
  Tooltip,
  Legend,
  ResponsiveContainer,
} from "recharts";
import { useAuth } from "@/lib/AuthContext/authContext";
import jsPDF from "jspdf";
import "jspdf-autotable";

const COLORS = [
  "#0088FE",
  "#00C49F",
  "#FFBB28",
  "#FF8042",
  "#FF6384",
  "#36A2EB",
];

interface Metric {
  label: string;
  value: number;
}

interface AdminReportsProps {
  metrics: Metric[];
}

export const AdminReports: React.FC<AdminReportsProps> = ({ metrics }) => {
  const { user } = useAuth();

  //   const handleGenerateReport = () => {
  //     // Logic to generate and download reports based on metrics
  //     const reportData = metrics
  //       .map((metric) => `${metric.label}: ${metric.value}`)
  //       .join("\n");
  //     const blob = new Blob([reportData], { type: "text/plain" });
  //     const url = window.URL.createObjectURL(blob);
  //     const link = document.createElement("a");
  //     link.href = url;
  //     link.download = "admin_report.txt";
  //     link.click();
  //     window.URL.revokeObjectURL(url);
  //   };

  const handleGenerateReport = () => {
    const doc = new jsPDF();

    // Add title
    doc.setFontSize(18);
    doc.text("Admin Report", 14, 20);

    // Add subtitle
    doc.setFontSize(12);
    doc.text(`Generated on: ${new Date().toLocaleString()}`, 14, 30);

    // Add table for metrics
    const tableData = metrics.map((metric) => [metric.label, metric.value]);

    // @ts-expect-error ignore
    doc.autoTable({
      head: [["Metric", "Value"]],
      body: tableData,
      startY: 40,
      styles: { halign: "center" },
      headStyles: { fillColor: [0, 123, 255] },
      bodyStyles: { fillColor: [245, 245, 245] },
    });

    // Add footer
    const pageHeight = doc.internal.pageSize.height;
    doc.setFontSize(10);
    doc.text("Report generated by Admin Dashboard", 14, pageHeight - 10);

    // Save the PDF
    doc.save("admin_report.pdf");
  };

  return (
    <div className="min-h-screen bg-gray-100 text-black p-8">
      {/* Header Section */}
      <header className="mb-10">
        <h1 className="text-3xl font-bold text-center text-gray-800 mb-4">
          Admin Reports
        </h1>
        <div className="flex items-center justify-between">
          <p className="text-gray-600">Welcome, {user?.email || "Admin"}!</p>
          {/* <Button
            onClick={handleLogout}
            className="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded"
          >
            Logout
          </Button> */}
          <Button
            onClick={handleGenerateReport}
            className="bg-blue-500 hover:bg-blue-600 text-white px-6 py-3 rounded-lg"
          >
            Generate Report
          </Button>
        </div>
      </header>

      {/* Main Content */}
      <main>
        {/* <div className="mb-8 text-center">
         
        </div> */}

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Metrics Overview */}
          <div className="bg-white p-6 rounded-lg shadow-md">
            <h2 className="text-xl font-bold mb-4">Metrics Overview</h2>
            <div className="grid grid-cols-2 gap-4">
              {metrics.map((metric, index) => (
                <div
                  key={index}
                  className="flex flex-col items-center justify-center bg-gray-50 p-4 rounded shadow-sm"
                >
                  <p className="text-lg font-bold">{metric.value}</p>
                  <p className="text-gray-500 text-sm">{metric.label}</p>
                </div>
              ))}
            </div>
          </div>

          {/* Pie Chart */}
          <div className="bg-white p-6 rounded-lg shadow-md">
            <h2 className="text-xl font-bold mb-4">Data Distribution</h2>
            <ResponsiveContainer width="100%" height={300}>
              <PieChart>
                <Pie
                  data={metrics}
                  dataKey="value"
                  nameKey="label"
                  cx="50%"
                  cy="50%"
                  outerRadius={100}
                  fill="#8884d8"
                  label
                >
                  {metrics.map((entry, index) => (
                    <Cell
                      key={`cell-${index}`}
                      fill={COLORS[index % COLORS.length]}
                    />
                  ))}
                </Pie>
                <Tooltip />
                <Legend verticalAlign="bottom" height={36} />
              </PieChart>
            </ResponsiveContainer>
          </div>
        </div>
      </main>
    </div>
  );
};
